using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CYK_algorithm.Model
{
    public class CYK
    {
        private List<Production> CFG;

        public CYK()
        {
            CFG = new List<Production>();
        }

        public void AddProduction(string Symbol, string Rule)
        {
            CFG.Add(new Production(Symbol, Rule));
        }

        public bool CYKAlgorithm(string Word)
        {
            bool output = false;
            List<Production>[,] CYKMatrix = new List<Production>[Word.Length, Word.Length];

            for (int i = 0; i < Word.Length; i++)
            {
                for (int j = 0; j < Word.Length; j++)
                {
                    CYKMatrix[i, j] = new List<Production>();
                }
            }
            //filling the first row
            for (int i = 0; i < Word.Length; i++)
            {
                foreach (Production prod in CFG)
                {
                    if (Word[i].ToString() == prod.Rule)
                    {
                        CYKMatrix[i, i].Add(prod);
                    }
                }
            }

            List<string> productions = new List<string>();
            int lastColumn = Word.Length - 1;
            for (int je = 1; je < Word.Length; je++)
            {
                int j = je;
                int i = 0;
                for (int v = 0; v < lastColumn; v++)
                {
                    for (int k2 = i; k2 < j; k2++)
                    {
                        int k = k2;
                        int k1 = k2 + 1;
                        List<Production> Swaplist1 = CYKMatrix[i, k];
                        List<Production> Swaplist2 = CYKMatrix[k1, j];
                        if (Swaplist1.Count == 0 || Swaplist2.Count == 0)
                            break;
                        else
                        {
                            foreach (Production p1 in Swaplist1)
                            {
                                foreach (Production p2 in Swaplist2)
                                    productions.Add(p1.Symbol + p2.Symbol);
                            }
                        }
                    }
                    foreach (string str in productions)
                    {
                        foreach (Production prod in CFG)
                        {
                            if (str == prod.Rule)
                            {
                                CYKMatrix[i, j].Add(prod);
                            }
                        }
                    }
                    i++;
                    j++;
                }
                productions.Clear();
                lastColumn--;
            }

            //Checks if the first symbol is found in the first row and last column
            //if true, the given word belongs to the language generated by the given CFG
            foreach (Production production in CFG)
            {
                if (production.Symbol=="S" && CYKMatrix[0, Word.Length-1].Contains(production))
                    output = true;
            }
            return output;
        }
    }
}
